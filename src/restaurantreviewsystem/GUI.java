package restaurantreviewsystem;

import javax.swing.*;
import java.sql.*;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author IMAN ZULHAKIM
 */
public class GUI extends javax.swing.JFrame {

    Connection conn;
    String name, location, cuisine, reviewText, searchBy, searchValue;
    double rating, avgRating, searchRating, searchAvgRating;
    int reviewID;
    private boolean invalidRatingValue;
    List<Review> reviews, sortReviews;
    List<Restaurant> restaurants, sortRestaurants;

    public GUI() {

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        setTitle("Restaurant Review System");
        setLocationRelativeTo(null);
        setResizable(false);
    }
    Restaurant restaurant, updatedRestaurant;
    Review rev, updatedRev;
    RestaurantReviewSystem resDB = new RestaurantReviewSystem();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        panelMenu = new javax.swing.JPanel();
        btnOpenManageRestaurant = new javax.swing.JButton();
        txtTitle1 = new javax.swing.JLabel();
        btnOpenManageReview = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        panelRestaurant = new javax.swing.JPanel();
        btnSearchRestaurant = new javax.swing.JButton();
        btnBackToMenu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRestaurant = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        cbSearchType = new javax.swing.JComboBox<>();
        btnDeleteRestaurant = new javax.swing.JButton();
        btnRefreshTableRestaurant = new javax.swing.JButton();
        txtTitle = new javax.swing.JLabel();
        btnMoveToAddPanel = new javax.swing.JButton();
        cboSortByRestaurant = new javax.swing.JComboBox<>();
        cboSortOrderRestaurant = new javax.swing.JComboBox<>();
        btnSortRestaurant = new javax.swing.JButton();
        panelAddRestaurant = new javax.swing.JPanel();
        btnAddRes = new javax.swing.JButton();
        lblEmail1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        lblPhoneNo1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        txtCuisine = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        panelReview = new javax.swing.JPanel();
        btnSearchReview = new javax.swing.JButton();
        btnBackToMenu1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblReview = new javax.swing.JTable();
        btnUpdateReview = new javax.swing.JButton();
        txtSearchReview = new javax.swing.JTextField();
        cbSearchTypeReview = new javax.swing.JComboBox<>();
        btnDeleteReview = new javax.swing.JButton();
        btnRefreshTableReview = new javax.swing.JButton();
        txtTitle2 = new javax.swing.JLabel();
        btnMoveToAddReviewPanel = new javax.swing.JButton();
        cboSortByReview = new javax.swing.JComboBox<>();
        cboSortOrderReview = new javax.swing.JComboBox<>();
        btnSortReview = new javax.swing.JButton();
        panelAddReview = new javax.swing.JPanel();
        btnAddReview = new javax.swing.JButton();
        lblResNameReview = new javax.swing.JLabel();
        lblReview = new javax.swing.JLabel();
        txtResNameReview = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBackReview = new javax.swing.JButton();
        lblRating = new javax.swing.JLabel();
        rb2 = new javax.swing.JRadioButton();
        rb1 = new javax.swing.JRadioButton();
        rb4 = new javax.swing.JRadioButton();
        rb3 = new javax.swing.JRadioButton();
        rb5 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReview = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelMenu.setBackground(new java.awt.Color(255, 255, 204));

        btnOpenManageRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnOpenManageRestaurant.setText("MANAGE RESTAURANT");
        btnOpenManageRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenManageRestaurantActionPerformed(evt);
            }
        });

        txtTitle1.setBackground(new java.awt.Color(0, 0, 0));
        txtTitle1.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 36)); // NOI18N
        txtTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTitle1.setText("RESTAURANT REVIEW SYSTEM");

        btnOpenManageReview.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnOpenManageReview.setText("MANAGE REVIEW");
        btnOpenManageReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenManageReviewActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMenuLayout = new javax.swing.GroupLayout(panelMenu);
        panelMenu.setLayout(panelMenuLayout);
        panelMenuLayout.setHorizontalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnOpenManageRestaurant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOpenManageReview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        panelMenuLayout.setVerticalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(txtTitle1)
                .addGap(82, 82, 82)
                .addComponent(btnOpenManageRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOpenManageReview, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(235, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("tab1", panelMenu);

        panelRestaurant.setBackground(new java.awt.Color(204, 204, 255));

        btnSearchRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnSearchRestaurant.setText("SEARCH");
        btnSearchRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRestaurantActionPerformed(evt);
            }
        });

        btnBackToMenu.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnBackToMenu.setText("BACK");
        btnBackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenuActionPerformed(evt);
            }
        });

        tblRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        tblRestaurant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "LOCATION", "CUISINE", "RATINGS"
            }
        ));
        tblRestaurant.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(tblRestaurant);
        if (tblRestaurant.getColumnModel().getColumnCount() > 0) {
            tblRestaurant.getColumnModel().getColumn(2).setHeaderValue("CUISINE");
        }

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N

        cbSearchType.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SEARCH BY", "NAME", "LOCATION", "CUISINE", "RATINGS" }));

        btnDeleteRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnDeleteRestaurant.setText("DELETE");
        btnDeleteRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRestaurantActionPerformed(evt);
            }
        });

        btnRefreshTableRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnRefreshTableRestaurant.setText("REFRESH");
        btnRefreshTableRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableRestaurantActionPerformed(evt);
            }
        });

        txtTitle.setBackground(new java.awt.Color(0, 0, 0));
        txtTitle.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 36)); // NOI18N
        txtTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTitle.setText("MANAGE RESTAURANT");

        btnMoveToAddPanel.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnMoveToAddPanel.setText("ADD NEW RESTAURANT");
        btnMoveToAddPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveToAddPanelActionPerformed(evt);
            }
        });

        cboSortByRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cboSortByRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SORT BY", "NAME", "LOCATION", "CUISINE", "AVERAGE RATING" }));

        cboSortOrderRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cboSortOrderRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ORDER BY", "ASCENDING", "DESCENDING" }));

        btnSortRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnSortRestaurant.setText("SORT");
        btnSortRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortRestaurantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRestaurantLayout = new javax.swing.GroupLayout(panelRestaurant);
        panelRestaurant.setLayout(panelRestaurantLayout);
        panelRestaurantLayout.setHorizontalGroup(
            panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRestaurantLayout.createSequentialGroup()
                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRestaurantLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelRestaurantLayout.createSequentialGroup()
                                .addComponent(btnMoveToAddPanel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefreshTableRestaurant)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBackToMenu))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelRestaurantLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTitle)
                            .addGroup(panelRestaurantLayout.createSequentialGroup()
                                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cboSortByRestaurant, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbSearchType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSearch)
                                    .addComponent(cboSortOrderRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSortRestaurant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearchRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        panelRestaurantLayout.setVerticalGroup(
            panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRestaurantLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(txtTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchRestaurant))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSortByRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSortOrderRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSortRestaurant))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshTableRestaurant)
                    .addComponent(btnBackToMenu)
                    .addComponent(btnMoveToAddPanel)
                    .addComponent(btnUpdate)
                    .addComponent(btnDeleteRestaurant))
                .addGap(30, 30, 30))
        );

        jTabbedPane.addTab("tab1", panelRestaurant);

        panelAddRestaurant.setBackground(new java.awt.Color(204, 255, 204));
        panelAddRestaurant.setPreferredSize(new java.awt.Dimension(562, 637));

        btnAddRes.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnAddRes.setText("ADD");
        btnAddRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResActionPerformed(evt);
            }
        });

        lblEmail1.setBackground(new java.awt.Color(255, 255, 255));
        lblEmail1.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblEmail1.setText("LOCATION");

        lblName1.setBackground(new java.awt.Color(255, 255, 255));
        lblName1.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblName1.setText("NAME");

        lblPhoneNo1.setBackground(new java.awt.Color(255, 255, 255));
        lblPhoneNo1.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblPhoneNo1.setText("CUISINE");

        txtName.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MANAGE RESTAURANT INFO");

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddRestaurantLayout = new javax.swing.GroupLayout(panelAddRestaurant);
        panelAddRestaurant.setLayout(panelAddRestaurantLayout);
        panelAddRestaurantLayout.setHorizontalGroup(
            panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddRestaurantLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddRestaurantLayout.createSequentialGroup()
                        .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAddRestaurantLayout.createSequentialGroup()
                                .addComponent(btnAddRes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBack))
                            .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelAddRestaurantLayout.createSequentialGroup()
                                    .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblEmail1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblPhoneNo1))
                                    .addGap(11, 11, 11)
                                    .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtLocation)
                                        .addComponent(txtCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(panelAddRestaurantLayout.createSequentialGroup()
                                    .addComponent(lblName1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddRestaurantLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(137, 137, 137))))
        );
        panelAddRestaurantLayout.setVerticalGroup(
            panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddRestaurantLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail1)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(panelAddRestaurantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddRes)
                    .addComponent(btnBack))
                .addContainerGap(268, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("tab2", panelAddRestaurant);

        panelReview.setBackground(new java.awt.Color(204, 204, 255));

        btnSearchReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnSearchReview.setText("SEARCH");
        btnSearchReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReviewActionPerformed(evt);
            }
        });

        btnBackToMenu1.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnBackToMenu1.setText("BACK");
        btnBackToMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenu1ActionPerformed(evt);
            }
        });

        tblReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        tblReview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "REVIEW", "RATINGS"
            }
        ));
        tblReview.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(tblReview);

        btnUpdateReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnUpdateReview.setText("UPDATE");
        btnUpdateReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReviewActionPerformed(evt);
            }
        });

        txtSearchReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N

        cbSearchTypeReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cbSearchTypeReview.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SEARCH BY", "NAME", "REVIEW", "RATING" }));

        btnDeleteReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnDeleteReview.setText("DELETE");
        btnDeleteReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReviewActionPerformed(evt);
            }
        });

        btnRefreshTableReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnRefreshTableReview.setText("REFRESH");
        btnRefreshTableReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableReviewActionPerformed(evt);
            }
        });

        txtTitle2.setBackground(new java.awt.Color(0, 0, 0));
        txtTitle2.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 36)); // NOI18N
        txtTitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTitle2.setText("MANAGE REVIEW");

        btnMoveToAddReviewPanel.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnMoveToAddReviewPanel.setText("ADD NEW REVIEW");
        btnMoveToAddReviewPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveToAddReviewPanelActionPerformed(evt);
            }
        });

        cboSortByReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cboSortByReview.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SORT BY", "NAME", "REVIEW", "RATING" }));

        cboSortOrderReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        cboSortOrderReview.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ORDER BY", "ASCENDING", "DESCENDING" }));

        btnSortReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnSortReview.setText("SORT");
        btnSortReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortReviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelReviewLayout = new javax.swing.GroupLayout(panelReview);
        panelReview.setLayout(panelReviewLayout);
        panelReviewLayout.setHorizontalGroup(
            panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReviewLayout.createSequentialGroup()
                .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReviewLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cboSortByReview, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbSearchTypeReview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchReview)
                            .addComponent(cboSortOrderReview, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSortReview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearchReview, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelReviewLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelReviewLayout.createSequentialGroup()
                                .addComponent(btnMoveToAddReviewPanel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateReview, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteReview, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefreshTableReview)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBackToMenu1))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReviewLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtTitle2)
                .addGap(175, 175, 175))
        );
        panelReviewLayout.setVerticalGroup(
            panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReviewLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(txtTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearchTypeReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchReview))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSortByReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSortOrderReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSortReview))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshTableReview)
                    .addComponent(btnBackToMenu1)
                    .addComponent(btnMoveToAddReviewPanel)
                    .addComponent(btnUpdateReview)
                    .addComponent(btnDeleteReview))
                .addGap(30, 30, 30))
        );

        jTabbedPane.addTab("tab1", panelReview);

        panelAddReview.setBackground(new java.awt.Color(204, 255, 204));
        panelAddReview.setPreferredSize(new java.awt.Dimension(562, 637));

        btnAddReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnAddReview.setText("SUBMIT");
        btnAddReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddReviewActionPerformed(evt);
            }
        });

        lblResNameReview.setBackground(new java.awt.Color(255, 255, 255));
        lblResNameReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblResNameReview.setText("NAME");

        lblReview.setBackground(new java.awt.Color(255, 255, 255));
        lblReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblReview.setText("REVIEW");

        txtResNameReview.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MANAGE REVIEW");

        btnBackReview.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnBackReview.setText("BACK");
        btnBackReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackReviewActionPerformed(evt);
            }
        });

        lblRating.setBackground(new java.awt.Color(255, 255, 255));
        lblRating.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblRating.setText("RATING");

        buttonGroup1.add(rb2);
        rb2.setText("2");

        buttonGroup1.add(rb1);
        rb1.setText("1");

        buttonGroup1.add(rb4);
        rb4.setText("4");

        buttonGroup1.add(rb3);
        rb3.setText("3");

        buttonGroup1.add(rb5);
        rb5.setText("5");

        txtReview.setColumns(20);
        txtReview.setRows(5);
        jScrollPane1.setViewportView(txtReview);

        javax.swing.GroupLayout panelAddReviewLayout = new javax.swing.GroupLayout(panelAddReview);
        panelAddReview.setLayout(panelAddReviewLayout);
        panelAddReviewLayout.setHorizontalGroup(
            panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddReviewLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddReviewLayout.createSequentialGroup()
                        .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelAddReviewLayout.createSequentialGroup()
                                .addComponent(lblResNameReview, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtResNameReview, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddReviewLayout.createSequentialGroup()
                                .addComponent(btnAddReview)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBackReview))
                            .addGroup(panelAddReviewLayout.createSequentialGroup()
                                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblReview)
                                    .addComponent(lblRating))
                                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelAddReviewLayout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(rb1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rb2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rb3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rb4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rb5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelAddReviewLayout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jScrollPane1)))))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddReviewLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(187, 187, 187))))
        );
        panelAddReviewLayout.setVerticalGroup(
            panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddReviewLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResNameReview)
                    .addComponent(txtResNameReview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblReview, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rb4)
                    .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rb1)
                        .addComponent(rb2)
                        .addComponent(rb3)
                        .addComponent(rb5)
                        .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addGroup(panelAddReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddReview)
                    .addComponent(btnBackReview))
                .addGap(101, 101, 101))
        );

        jTabbedPane.addTab("tab2", panelAddReview);

        getContentPane().add(jTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, 550, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

//##########################################################################################
//---------------------------------------MANAGE RESTAURANT--------------------------------------------------------------
//##########################################################################################
    private void btnOpenManageRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenManageRestaurantActionPerformed
        jTabbedPane.setSelectedIndex(1);
        populateRestaurantJTable(); //// will update the jTable in Manage Restaurant ----------------------
    }//GEN-LAST:event_btnOpenManageRestaurantActionPerformed

    private void btnOpenManageReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenManageReviewActionPerformed
        jTabbedPane.setSelectedIndex(3);
        populateReviewJTable();/////will update the jTable in Manage Review----------------------
    }//GEN-LAST:event_btnOpenManageReviewActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

//##########################################################################################
//---------------------------------------MANAGE RESTAURANT--------------------------------------------------------------
//##########################################################################################
//#######################--ADD RESTAURANT FUNCTION--#################################################
    private void btnMoveToAddPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveToAddPanelActionPerformed
        jTabbedPane.setSelectedIndex(2);
    }//GEN-LAST:event_btnMoveToAddPanelActionPerformed

    private void btnAddResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResActionPerformed
        name = txtName.getText().trim();
        location = txtLocation.getText().trim();
        cuisine = txtCuisine.getText().trim();

        // Check if any of the required fields is empty
        if (name.isEmpty() || location.isEmpty() || cuisine.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE FILL IN ALL DETAILS!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        restaurant = new Restaurant(name, location, cuisine);

        try {
            resDB.addRestaurant(restaurant);
            JOptionPane.showMessageDialog(rootPane, name + " WAS SUCCESSFULLY ADDED!");
            txtName.setText("");
            txtLocation.setText("");
            txtCuisine.setText("");
            populateRestaurantJTable(); //// will update the jTable in Manage Restaurant ----------------------
            jTabbedPane.setSelectedIndex(1);
        } catch (RestaurantAlreadyExistsException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddResActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        jTabbedPane.setSelectedIndex(1);
        txtName.setText("");
        txtLocation.setText("");
        txtCuisine.setText("");
    }//GEN-LAST:event_btnBackActionPerformed

//#####################--UPDATE RESTAURANT FUNCTION--################################################
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        name = JOptionPane.showInputDialog(rootPane, "ENTER THE NAME OF THE RESTAURANT TO UPDATE:");
        if (name == null) {
            // The user canceled the input dialog, so just return without doing anything
            return;
        }

        // Fetch data for the specified restaurant from the database
        Restaurant restaurantToUpdate = resDB.getRestaurantByName(name);

        if (restaurantToUpdate != null) {
            // Display existing data in another input dialog for the user to update
            // String updatedName = JOptionPane.showInputDialog(rootPane, "Restaurant Name:", restaurantToUpdate.getName());
            String updatedName = (restaurantToUpdate.getName());
            String updatedLocation = JOptionPane.showInputDialog(rootPane, "LOCATION:", restaurantToUpdate.getLocation());
            String updatedCuisine = JOptionPane.showInputDialog(rootPane, "CUISINE:", restaurantToUpdate.getCuisine());

            // Create a new Restaurant object with the updated details
            updatedRestaurant = new Restaurant(updatedName, updatedLocation, updatedCuisine);
            // Call the updateRestaurant method to update the restaurant in the database
            resDB.updateRestaurant(updatedRestaurant);

            JOptionPane.showMessageDialog(rootPane, "RESTAURANT UPDATED SUCCESSFULLY!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "RESTAURANT NOT FOUND!");
        }

        populateRestaurantJTable(); //// will update the jTable in Manage Restaurant ----------------------
    }//GEN-LAST:event_btnUpdateActionPerformed

//#####################--DELETE RESTAURANT FUNCTION--################################################
    private void btnDeleteRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRestaurantActionPerformed
        // TODO add your handling code here:
        name = JOptionPane.showInputDialog(rootPane, "ENTER THE NAME OF THE RESTAURANT TO DELETE:");
        if (name == null) {
            // The user canceled the input dialog, so just return without doing anything
            return;
        }

        Restaurant restaurantToDelete = resDB.getRestaurantByName(name);
        if (restaurantToDelete != null) {
            resDB.deleteRestaurantByName(name);
            populateRestaurantJTable(); //// will update the jTable in Manage Restaurant ----------------------
            JOptionPane.showMessageDialog(rootPane, "RESTAURANT DELETED SUCCESSFULLY!");
        } else
            JOptionPane.showMessageDialog(rootPane, "RESTAURANT NOT FOUND!");
    }//GEN-LAST:event_btnDeleteRestaurantActionPerformed

//#####################--REFRESH RESTAURANT FUNCTION--################################################
    private void btnRefreshTableRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableRestaurantActionPerformed
        // TODO add your handling code here:
        populateRestaurantJTable(); //// will update the jTable in Manage Restaurant ----------------------
        txtSearch.setText("");
    }//GEN-LAST:event_btnRefreshTableRestaurantActionPerformed

//#####################--BACK TO MENU FROM RESTAURANT--################################################
    private void btnBackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenuActionPerformed
        jTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_btnBackToMenuActionPerformed

//##########################################################################################
//---------------------------------------MANAGE REVIEW--------------------------------------------------------------
//##########################################################################################
//#######################--ADD REVIEW FUNCTION--#################################################
    private void btnMoveToAddReviewPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveToAddReviewPanelActionPerformed
        String restaurantName = JOptionPane.showInputDialog(rootPane, "ENTER THE NAME OF THE RESTAURANT:", "Restaurant Name");

        if (restaurantName != null && !restaurantName.isEmpty()) {
            // Check if the restaurant name exists in the database before proceeding to the Add Review panel
            Restaurant restaurant = resDB.getRestaurantByName(restaurantName);
            if (restaurant != null) {
                txtResNameReview.setText(restaurantName);
                jTabbedPane.setSelectedIndex(4); // Move to the Add Review panel
            } else {
                JOptionPane.showMessageDialog(rootPane, "RESTAURANT NOT FOUND!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnMoveToAddReviewPanelActionPerformed

    private void btnAddReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddReviewActionPerformed
        name = txtResNameReview.getText().trim();
        reviewText = txtReview.getText().trim();

        // Check if any of the required fields is empty
        if (name.isEmpty() || reviewText.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE FILL IN ALL DETAILS!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ButtonModel selectedButton = buttonGroup1.getSelection();
        if (selectedButton == null) {
            // Display an error message if the rating is not chosen
            JOptionPane.showMessageDialog(rootPane, "PLEASE SELECT A RATING!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (rb1.isSelected()) {
            rating = Double.parseDouble(rb1.getText());
        } else if (rb2.isSelected()) {
            rating = Double.parseDouble(rb2.getText());
        } else if (rb3.isSelected()) {
            rating = Double.parseDouble(rb3.getText());
        } else if (rb4.isSelected()) {
            rating = Double.parseDouble(rb4.getText());
        } else if (rb5.isSelected()) {
            rating = Double.parseDouble(rb5.getText());
        }

        // Check if the restaurant name exists in the database before adding the review
        Restaurant restaurant = resDB.getRestaurantByName(name);
        if (restaurant != null) {
            rev = new Review(name, reviewText, rating);
            resDB.addReview(name, rev);
            populateRestaurantJTable(); //// will update the jTable in Restaurant Review----------------------
            JOptionPane.showMessageDialog(rootPane, "REVIEW FOR " + name + " IS SUCCESSFULLY ADDED!");
            txtResNameReview.setText("");
            txtReview.setText("");
            buttonGroup1.clearSelection();

            jTabbedPane.setSelectedIndex(3);
            populateReviewJTable();/////will update the jTable in Manage Review----------------------
        } else {
            JOptionPane.showMessageDialog(rootPane, "RESTAURANT NOT FOUND!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddReviewActionPerformed

    private void btnBackReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackReviewActionPerformed
        jTabbedPane.setSelectedIndex(3);
        txtResNameReview.setText("");
        txtReview.setText("");
        buttonGroup1.clearSelection();
    }//GEN-LAST:event_btnBackReviewActionPerformed

    //#####################--UPDATE REVIEW FUNCTION--################################################
    private void btnUpdateReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReviewActionPerformed
        reviewID = 0;
        try {
            String input = JOptionPane.showInputDialog(rootPane, "ENTER THE ID OF THE REVIEW TO UPDATE:");
            if (input == null) {
                // The user canceled the input dialog, so just return without doing anything
                return;
            }
            reviewID = Integer.parseInt(input);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "INVALID REVIEW ID. PLEASE ENTER A VALID NUMBER!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Fetch data for the specified review from the database
        Review reviewToUpdate = resDB.getReviewById(reviewID);

        if (reviewToUpdate != null) {
            // Display existing data in another input dialog for the user to update
            String updatedName = reviewToUpdate.getResName();
            String updatedReview = JOptionPane.showInputDialog(rootPane, "REVIEW:", reviewToUpdate.getReview());

            // Create a combobox with rating options 1 to 5
            Integer[] ratingOptions = {1, 2, 3, 4, 5};
            JComboBox<Integer> ratingComboBox = new JComboBox<>(ratingOptions);
            ratingComboBox.setSelectedItem(reviewToUpdate.getRating());
            JOptionPane.showMessageDialog(rootPane, ratingComboBox, "RATING:", JOptionPane.QUESTION_MESSAGE);

            double updatedRating = (int) ratingComboBox.getSelectedItem();

            // Create a new Review object with the updated details
            Review updatedRev = new Review(reviewID, updatedName, updatedReview, updatedRating);
            // Call the updateReview method to update the review in the database
            resDB.updateReview(updatedRev);

            JOptionPane.showMessageDialog(rootPane, "REVIEW UPDATED SUCCESSFULLY!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "REVIEW NOT FOUND!");
        }

        populateReviewJTable(); //// will update the jTable in Manage Review ----------------------

    }//GEN-LAST:event_btnUpdateReviewActionPerformed

//#####################--DELETE REVIEW FUNCTION--################################################
    private void btnDeleteReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReviewActionPerformed
        // TODO add your handling code here:
        reviewID = 0;
        try {
            String input = JOptionPane.showInputDialog(rootPane, "ENTER THE ID OF THE REVIEW TO DELETE:");
            if (input == null) {
                // The user canceled the input dialog, so just return without doing anything
                return;
            }
            reviewID = Integer.parseInt(input);

            if (resDB.deleteReviewById(reviewID)) {
                // If the review is deleted successfully, display a message and update the JTable
                JOptionPane.showMessageDialog(rootPane, "REVIEW WITH ID " + reviewID + " HAS BEEN DELETED!", "DELETED", JOptionPane.INFORMATION_MESSAGE);
                populateReviewJTable(); // will update the jTable in Manage Restaurant
            } else {
                // If the review ID is not found, display an error message
                JOptionPane.showMessageDialog(rootPane, "REVIEW WITH ID " + reviewID + " NOT FOUND!", "NOT FOUND", JOptionPane.ERROR_MESSAGE);
            } //// will update the jTable in Manage Restaurant ----------------------
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "INVALID ID FORMAT. PLEASE ENTER A VALID FORMAT!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteReviewActionPerformed

    //#####################--REFRESH REVEIW TABLE--################################################
    private void btnRefreshTableReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableReviewActionPerformed
        // TODO add your handling code here:
        populateReviewJTable(); //// will update the jTable in Manage Restaurant ----------------------
        txtSearchReview.setText("");
    }//GEN-LAST:event_btnRefreshTableReviewActionPerformed

    //#####################--BACK TO MENU FROM REVIEW--################################################
    private void btnBackToMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenu1ActionPerformed
        jTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_btnBackToMenu1ActionPerformed

    //##########################################################################################
    //---------------------------------------SEARCH RESTAURANT--------------------------------------------------------------
    //##########################################################################################

    private void btnSearchRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRestaurantActionPerformed
        searchBy = cbSearchType.getSelectedItem().toString();
        searchValue = txtSearch.getText();
        if (searchBy.equalsIgnoreCase("SEARCH BY")) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE CHOOSE THE CONDITION!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            // Call the sorting method based on selected values         
            populateRestaurantJTableAfterSearch(searchBy, searchValue);

        }

    }//GEN-LAST:event_btnSearchRestaurantActionPerformed

    public void populateRestaurantJTableAfterSearch(String searchBy, String searchValue) {
        invalidRatingValue = false;
        restaurants = resDB.getAllRestaurants();
        sortRestaurants = sortRestaurants(restaurants, searchBy, searchValue);

        if (sortRestaurants.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "NO MATCHING RESTAURANTS FOUND!", "NO RESULTS", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = new DefaultTableModel();
            // Add columns to the table model
            model.addColumn("NAME");
            model.addColumn("LOCATION");
            model.addColumn("CUISINE");
            model.addColumn("AVERAGE RATING");

            for (Restaurant restaurant : sortRestaurants) {
                name = restaurant.getName();
                location = restaurant.getLocation();
                cuisine = restaurant.getCuisine();
                avgRating = resDB.getAverageRatingForRestaurant(name);

                // Add a new row to the table model with name, location, cuisine, and average rating
                model.addRow(new Object[]{name, location, cuisine, avgRating});
            }

            tblRestaurant.setModel(model);
            JOptionPane.showMessageDialog(rootPane, "RESTAURANTS FOUND!", "FOUND", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private List<Restaurant> sortRestaurants(List<Restaurant> restaurants, String searchBy, String searchValue) {
        return restaurants.stream() //lambda
                .filter(restaurant -> {
                    switch (searchBy) {
                        case "NAME":
                            return restaurant.getName().equalsIgnoreCase(searchValue);
                        case "LOCATION":
                            return restaurant.getLocation().equalsIgnoreCase(searchValue);
                        case "CUISINE":
                            return restaurant.getCuisine().equalsIgnoreCase(searchValue);
                        case "RATINGS":
                            avgRating = resDB.getAverageRatingForRestaurant(restaurant.getName());
                            // Convert the searchValue to a double and compare with the average rating
                            try {
                                searchAvgRating = Double.parseDouble(searchValue);
                                return avgRating == searchAvgRating;
                            } catch (NumberFormatException e) {
                                return false; // Invalid searchValue (not a number)
                            }
                        default:
                            return false; // Invalid searchBy value
                    }
                })
                .collect(Collectors.toList());
    }

    //##########################################################################################
    //---------------------------------------SEARCH REVIEW--------------------------------------------------------------
    //########################################################################################## 
    private void btnSearchReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReviewActionPerformed
        searchBy = cbSearchTypeReview.getSelectedItem().toString();
        searchValue = txtSearchReview.getText();

        if (searchBy.equalsIgnoreCase("SEARCH BY")) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE CHOOSE THE CONDITION!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            // Call the sorting method based on selected values         
            populateReviewJTableAfterSearch(searchBy, searchValue);
            txtSearchReview.setText("");
        }
    }//GEN-LAST:event_btnSearchReviewActionPerformed

    public void populateReviewJTableAfterSearch(String searchBy, String searchValue) {
        invalidRatingValue = false;
        reviews = resDB.getAllReview();
        sortReviews = sortReviews(reviews, searchBy, searchValue);

        if (invalidRatingValue) {
            // Display an error message for invalid rating value only once
            JOptionPane.showMessageDialog(rootPane, "INVALID RATING VALUE. PLEASE ENTER A VALID NUMBER!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        if (sortReviews.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "NO MATCHING REVIEWS FOUND!", "NO RESULTS", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = new DefaultTableModel();
            // Add columns to the table model
            model.addColumn("REVIEW ID");
            model.addColumn("NAME");
            model.addColumn("REVIEW");
            model.addColumn("RATING");

            for (Review review : sortReviews) {
                reviewID = review.getReviewID();
                name = review.getResName();
                reviewText = review.getReview();
                rating = review.getRating();

                // Add a new row to the table model with name, review, and rating
                model.addRow(new Object[]{reviewID, name, reviewText, rating});
            }

            tblReview.setModel(model);
            JOptionPane.showMessageDialog(rootPane, "REVIEWS FOUND!", "FOUND", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private List<Review> sortReviews(List<Review> reviews, String searchBy, String searchValue) {
        return reviews.stream()
                .filter(review -> {
                    switch (searchBy) {
                        case "NAME":
                            return review.getResName().equalsIgnoreCase(searchValue);
                        case "REVIEW":
                            return review.getReview().contains(searchValue);
                        case "RATING":
                        try {
                            searchRating = Double.parseDouble(searchValue);
                            return review.getRating() == searchRating;
                        } catch (NumberFormatException e) {
                            // Invalid searchValue (not a number)
                            // Set the invalidRatingValue flag to true to display the error message later
                            invalidRatingValue = true;
                            return false;
                        }
                        default:
                            return false; // Invalid searchBy value
                    }
                })
                .collect(Collectors.toList());
    }

    //##########################################################################################
    //---------------------------------------SORT RESTAURANT--------------------------------------------------------------
    //##########################################################################################
    private void btnSortRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortRestaurantActionPerformed
        // TODO add your handling code here:
        String sortBy = cboSortByRestaurant.getSelectedItem().toString();
        String orderBy = cboSortOrderRestaurant.getSelectedItem().toString();

        if (sortBy.equalsIgnoreCase("SORT BY") || orderBy.equalsIgnoreCase("ORDER BY")) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE CHOOSE THE CONDITION!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Call the sorting method based on selected values
            sortRestaurants(sortBy, orderBy);
            JOptionPane.showMessageDialog(rootPane, "SORTED!", "SORT", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnSortRestaurantActionPerformed

    private void sortRestaurants(String sortBy, String orderBy) {
        List<Restaurant> restaurants = resDB.getAllRestaurants();

        //Sort the data based on the selected field and order
        switch (sortBy) {
            case "NAME":
                restaurants.sort(Comparator.comparing(Restaurant::getName));
                break;
            case "LOCATION":
                restaurants.sort(Comparator.comparing(Restaurant::getLocation));
                break;
            case "CUISINE":
                restaurants.sort(Comparator.comparing(Restaurant::getCuisine));
                break;
            case "AVERAGE RATING":
                restaurants.sort(Comparator.comparingDouble(r -> resDB.getAverageRatingForRestaurant(r.getName()))); //lambda
                break;
            default:
                // Invalid sort field
                return;
        }

        // Apply descending order if selected
        if (orderBy.equalsIgnoreCase("Descending")) {
            Collections.reverse(restaurants);
        }

        // Get the table model from the JTable
        DefaultTableModel model = (DefaultTableModel) tblRestaurant.getModel();

        // Clear the current data in the table model
        model.setRowCount(0);

        // Add the sorted data to the table model
        for (Restaurant restaurant : restaurants) {
            String name = restaurant.getName();
            String location = restaurant.getLocation();
            String cuisine = restaurant.getCuisine();
            double averageRating = resDB.getAverageRatingForRestaurant(name);
            // Add a new row to the table model with name, location, cuisine, and average rating
            model.addRow(new Object[]{name, location, cuisine, averageRating});
        }
    }

    //##########################################################################################
    //---------------------------------------SORT REVIEW--------------------------------------------------------------
    //##########################################################################################
    private void btnSortReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortReviewActionPerformed
        // TODO add your handling code here:
        String sortBy = cboSortByReview.getSelectedItem().toString();
        String orderBy = cboSortOrderReview.getSelectedItem().toString();

        if (sortBy.equalsIgnoreCase("SORT BY") || orderBy.equalsIgnoreCase("ORDER BY")) {
            JOptionPane.showMessageDialog(rootPane, "PLEASE CHOOSE THE CONDITION!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Call the sorting method based on selected values
            sortReviews(sortBy, orderBy);
            JOptionPane.showMessageDialog(rootPane, "REVIEWS SORTED!", "SORT", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSortReviewActionPerformed

    private void sortReviews(String sortBy, String orderBy) {
        List<Review> reviews = resDB.getAllReview();

        // Sort the data based on the selected field and order
        switch (sortBy) {
            case "NAME":
                reviews.sort(Comparator.comparing(Review::getResName));
                break;
            case "REVIEW":
                reviews.sort(Comparator.comparing(Review::getReview));
                break;
            case "RATING":
                reviews.sort(Comparator.comparingDouble(Review::getRating));
                break;
            default:
                // Invalid sort field
                return;
        }

        // Apply descending order if selected
        if (orderBy.equalsIgnoreCase("Descending")) {
            Collections.reverse(reviews);
        }

        // Get the table model from the JTable
        DefaultTableModel model = (DefaultTableModel) tblReview.getModel();

        // Clear the current data in the table model
        model.setRowCount(0);

        // Add the sorted data to the table model
        for (Review review : reviews) {
            int reviewID = review.getReviewID();
            String name = review.getResName();
            String reviewText = review.getReview();
            double rating = review.getRating();
            // Add a new row to the table model with name, review, and rating
            model.addRow(new Object[]{reviewID, name, reviewText, rating});
        }
    }

    //#########################-------POPULATE TABLE RESTAURANT--########################
    public void populateRestaurantJTable() {
        List<Restaurant> restaurants = resDB.getAllRestaurants();
        DefaultTableModel model = new DefaultTableModel();

        // Add columns to the table model
        model.addColumn("NAME");
        model.addColumn("LOCATION");
        model.addColumn("CUISINE");
        model.addColumn("AVERAGE RATING");

        for (Restaurant restaurant : restaurants) {
            String name = restaurant.getName();
            String location = restaurant.getLocation();
            String cuisine = restaurant.getCuisine();
            double averageRating = resDB.getAverageRatingForRestaurant(name);

            // Add a new row to the table model with name, location, cuisine, and average rating
            model.addRow(new Object[]{name, location, cuisine, averageRating});
        }

        // Set the table model to the JTable
        tblRestaurant.setModel(model);
    }

    //#########################-------POPULATE TABLE REVIEW--########################
    public void populateReviewJTable() {
        List<Review> reviews = resDB.getAllReview();
        DefaultTableModel model = new DefaultTableModel();

        // Add columns to the table model
        model.addColumn("REVIEW ID");
        model.addColumn("NAME");
        model.addColumn("REVIEW");
        model.addColumn("RATING");

        for (Review r : reviews) {
            int id = r.getReviewID();
            String n = r.getResName();
            String re = r.getReview();
            double ra = r.getRating();

            // Add a new row to the table model with ID, name, review, rating
            model.addRow(new Object[]{id, n, re, ra});
        }
        // Set the table model to the JTable
        tblReview.setModel(model);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRes;
    private javax.swing.JButton btnAddReview;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBackReview;
    private javax.swing.JButton btnBackToMenu;
    private javax.swing.JButton btnBackToMenu1;
    private javax.swing.JButton btnDeleteRestaurant;
    private javax.swing.JButton btnDeleteReview;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMoveToAddPanel;
    private javax.swing.JButton btnMoveToAddReviewPanel;
    private javax.swing.JButton btnOpenManageRestaurant;
    private javax.swing.JButton btnOpenManageReview;
    private javax.swing.JButton btnRefreshTableRestaurant;
    private javax.swing.JButton btnRefreshTableReview;
    private javax.swing.JButton btnSearchRestaurant;
    private javax.swing.JButton btnSearchReview;
    private javax.swing.JButton btnSortRestaurant;
    private javax.swing.JButton btnSortReview;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateReview;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbSearchType;
    private javax.swing.JComboBox<String> cbSearchTypeReview;
    private javax.swing.JComboBox<String> cboSortByRestaurant;
    private javax.swing.JComboBox<String> cboSortByReview;
    private javax.swing.JComboBox<String> cboSortOrderRestaurant;
    private javax.swing.JComboBox<String> cboSortOrderReview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lblEmail1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblPhoneNo1;
    private javax.swing.JLabel lblRating;
    private javax.swing.JLabel lblResNameReview;
    private javax.swing.JLabel lblReview;
    private javax.swing.JPanel panelAddRestaurant;
    private javax.swing.JPanel panelAddReview;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelRestaurant;
    private javax.swing.JPanel panelReview;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JRadioButton rb3;
    private javax.swing.JRadioButton rb4;
    private javax.swing.JRadioButton rb5;
    private javax.swing.JTable tblRestaurant;
    private javax.swing.JTable tblReview;
    private javax.swing.JTextField txtCuisine;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtResNameReview;
    private javax.swing.JTextArea txtReview;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchReview;
    private javax.swing.JLabel txtTitle;
    private javax.swing.JLabel txtTitle1;
    private javax.swing.JLabel txtTitle2;
    // End of variables declaration//GEN-END:variables

}
